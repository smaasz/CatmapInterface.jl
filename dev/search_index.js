var documenterSearchIndex = {"docs":
[{"location":"guide/#Package-Guide","page":"Guide","title":"Package Guide","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"CatmapInterface implements the functionality of a subset of the Python package CatMAP that is used in the Python package CatINT. Whereas CatINT uses an iterative approach for combining the Poisson-Nernst-Planck transport model with a microkinetic model of the surface reactions at the electrode, the output of CatmapInterface can be directly plugged into the functionality of LiquidElectrolytes to solve the coupled system.","category":"page"},{"location":"guide/#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"pkg> add https://github.com/smaasz/CatmapInterface.jl","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Or, equivalently, via the Pkg API:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"julia> import Pkg; Pkg.add(\"https://github.com/smaasz/CatmapInterface.jl\")","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Finally, you need to include it to the current module","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"julia> using CatmapInterface","category":"page"},{"location":"guide/#Parsing-a-CatMAP-Input-File","page":"Guide","title":"Parsing a CatMAP Input File","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"note: Note\nCatmapInterface only supports a subset of the complete CatMAP functionality. See parse_catmap_input for details.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Assuming that the microkinetic model is described in a CatMAP input file stored locally at input_file_path (see e.g. CO2-Reduction on Ag), the input can be parsed by","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"julia> catmap_params = parse_catmap_input(input_file_path)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"which returns a CatmapParams struct that stores the needed information.","category":"page"},{"location":"guide/#Creating-the-Microkinetic-Model","page":"Guide","title":"Creating the Microkinetic Model","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"CatmapInterface assembles the microkinetic model as a ReactionSystem implemented in Catalyst.jl:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"julia> microkinetic_rn = create_reaction_network(catmap_params)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"It includes all specified species but neglects the solvent, water, and the ficitious species of electrons.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(\"Catalyst\"); using Catalyst\njulia> species(microkinetic_rn)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"The reaction rates are computed symbolically in the parameters of the model","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"julia> parameters(microkinetic_rn)","category":"page"},{"location":"guide/#Use-the-Microkinetic-Model-in-LiquidElectrolytes","page":"Guide","title":"Use the Microkinetic Model in LiquidElectrolytes","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"To use the rate equations from the microkinetic model in the Poisson-Nernst-Planck transport model implemented in LiquidElectrolytes, an in-place function definition (see Interface of DiffEq.jl) of the (micro-)kinetic model ODE can be generated. First, the reaction network is converted into an ModelingToolkit.ODESystem using the Catalyst.convert method:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"julia> odesys = convert(ODESystem, microkinetic_rn; combinatoric_ratelaws=false)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Next the (micro-)kinetic model is transformed from surface/gas-reactions to surface/electrolyte-reactions using the liquidize method:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"julia> odesys = liquidize(odesys, catmap_params)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Finally, the in-place ODE function can be generated by applying the CatmapInterface.generate_function method:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"julia> f_microkinetics! = CatmapInterface.generate_function(odesys; dvs, ps)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"where dvs and ps define the order the species and parameters, respectively. See CatmapInterface.generate_function for details.","category":"page"},{"location":"public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"public/#General-Remarks","page":"Public","title":"General Remarks","text":"","category":"section"},{"location":"public/#Interface","page":"Public","title":"Interface","text":"","category":"section"},{"location":"public/","page":"Public","title":"Public","text":"parse_catmap_input\nCatmapParams","category":"page"},{"location":"public/#CatmapInterface.parse_catmap_input","page":"Public","title":"CatmapInterface.parse_catmap_input","text":"parse_catmap_input(input_file_path)\n\n\nParse the content of a CatMAP input file for creating microkinetic model.\n\nThe input file is first interpreted by a Python interpreter and then parsed. The following information is used and must be specified:\n\nrxn_expressions\nprefactor_list\nspecies_definitions (must include an entry for every reactant, even if empty)\ninput_file (including the energy table)\nsurface_names (currently only the use of exactly one surface is implemented)\nbulk_ph\nextrapolated_potential\npotential_reference_scale\ngas_thermo_mode (options: ideal_gas)\nadsorbate_thermo_mode (options: harmonic_adsorbate)\nelectrochemical_thermo_mode (options: simple_electrochemical, hbond_surface_charge_density)\n\nMoreover, the following information is optional and default values exist\n\nadsorbate_interaction_model (options: ideal (default), first_order)\ncross_interaction_mode (only used if adsorbate_interaction_model=first_order, options: geometric_mean (default), arithmetic_mean, neglect)\ntransition_state_cross_interaction_mode (only used if adsorbate_interaction_model=first_order, options: intermediate_state (default), initial_state, final_state, neglect)\ninteraction_response_function (only used if adsorbate_interaction_mode=first_order, default: smooth_piecewise_linear)\n\nSee CatMAP documentation for details.\n\n\n\n\n\n","category":"function"},{"location":"public/#CatmapInterface.CatmapParams","page":"Public","title":"CatmapInterface.CatmapParams","text":"struct CatmapParams\n\nMain data structure for interfacing CatMAP\n\nreactions::Vector{CatmapInterface.ParsedReaction}: List of parsed reactions\n\nprefactors::Vector{Float64}: Prefactors in the Arrhenius relation specifying the activation energy of the corresponding reactions\n\nspecies_list::Dict{String, AbstractSpecies}: List of species including all reactants\n\ngas_thermo_mode::Symbol: Mode of the thermodynamical correction to the formation energy of the gases\n\nadsorbate_thermo_mode::Symbol: Mode of the thermodynamical correction to the formation energy of the adsorbates and transition states\n\nelectrochemical_thermo_mode::Symbol: Mode of the electrochemical correction to the formation energy of the species\n\nbulk_pH::Float64: pH value in the bulk of the electrolyte\n\nUref::Float64: Reference potential with respect to the specified potential reference scale\n\npotential_reference_scale::String: Either RHE or SHE\n\nT::Float64: Temperature in the bulk\n\nadsorbate_interaction_params::CatmapInterface.AdsorbateInteractionParams: Parameter specifying the adsorbate interaction model\n\n\n\n\n\n","category":"type"},{"location":"public/#Species","page":"Public","title":"Species","text":"","category":"section"},{"location":"public/","page":"Public","title":"Public","text":"AbstractSpecies\nGasSpecies\nAdsorbateSpecies\nTStateSpecies\nFictiousSpecies\nSiteSpecies","category":"page"},{"location":"public/#CatmapInterface.AbstractSpecies","page":"Public","title":"CatmapInterface.AbstractSpecies","text":"abstract type AbstractSpecies\n\nAbstract supertype of species.\n\n\n\n\n\n","category":"type"},{"location":"public/#CatmapInterface.GasSpecies","page":"Public","title":"CatmapInterface.GasSpecies","text":"struct GasSpecies <: AbstractSpecies\n\nspecies_name::String: Name of the species\n\nformation_energy::Float64: Formation energy of the species in joule per mole\n\npressure::Float64: Partial pressure of the species in pascal\n\nfrequencies::Vector{Float64}: Normal modes of vibration of the species in m⁻¹\n\nhenry_const::Union{Missing, Float64}: Henry constant used to convert between gas and liquid phase\n\n\n\n\n\n","category":"type"},{"location":"public/#CatmapInterface.AdsorbateSpecies","page":"Public","title":"CatmapInterface.AdsorbateSpecies","text":"struct AdsorbateSpecies <: AbstractSpecies\n\nspecies_name::String: Name of the species\n\nformation_energy::Float64: Formation energy of the species in joule per mole\n\ncoverage::Float64: Surface coverage of the species\n\nsite::String: Site the species adsorbs to\n\nsurface_name::String: Name of the surface the species adsorbs to\n\nfrequencies::Vector{Float64}: Normal modes of vibration of the species in m⁻¹\n\nsigma_params::NamedTuple{(:a, :b), Tuple{Union{Nothing, Float64}, Union{Nothing, Float64}}}: Parameters specifying the electrochemcial correction to the formation energy due to surface charges: G_f(U=0 σ)  G_f(U=0σ=0)+acdot σ + bcdot σ^2\n\nself_interaction_param::Float64: Parameter used in CatmapInterface.first_order_adsorbate_interaction to specify the formation energy's dependence on the coverage\n\ncross_interaction_params::Dict{String, Float64}: Parameter used in CatmapInterface.first_order_adsorbate_interaction to specify the formation energy's dependence on the coverage of other adsorbates\n\n\n\n\n\n","category":"type"},{"location":"public/#CatmapInterface.TStateSpecies","page":"Public","title":"CatmapInterface.TStateSpecies","text":"struct TStateSpecies <: AbstractSpecies\n\nspecies_name::String: Name of the species\n\nformation_energy::Float64: Formation energy of the species in joule per mole\n\ncoverage::Float64: Surface coverage of the species\n\nsite::String: Site the species adsorbs to\n\nsurface_name::String: Name of the surface the species adsorbs to\n\nfrequencies::Vector{Float64}: Normal modes of vibration of the species in m⁻¹\n\nβ::Float64: Transfer coefficient of the reaction passing through the specified transition state\n\nbetween_species::Vector{Pair{String, Int64}}: Specifying the list of (stable) species (with stoichiometric factor) the transition state is between\n\nsigma_params::NamedTuple{(:a, :b), Tuple{Union{Nothing, Float64}, Union{Nothing, Float64}}}: Parameters specifying the electrochemcial correction to the formation energy due to surface charges: G_f(U=0 σ)  G_f(U=0σ=0)+acdot σ + bcdot σ^2\n\ncross_interaction_params::Dict{String, Float64}: Parameter used in CatmapInterface.first_order_adsorbate_interaction to specify the formation energy's dependence on the coverage of other adsorbates\n\n\n\n\n\n","category":"type"},{"location":"public/#CatmapInterface.FictiousSpecies","page":"Public","title":"CatmapInterface.FictiousSpecies","text":"struct FictiousSpecies <: AbstractSpecies\n\nspecies_name::String: Name of the species\n\nformation_energy::Float64: Formation energy of the species in joule per mole\n\npressure::Float64: Partial pressure of the species in pascal\n\n\n\n\n\n","category":"type"},{"location":"public/#CatmapInterface.SiteSpecies","page":"Public","title":"CatmapInterface.SiteSpecies","text":"struct SiteSpecies <: AbstractSpecies\n\nformation_energy::Float64: Formation energy of the site in joule per mole\n\nsite_name::String: Name of the site\n\ninteraction_response_params::CatmapInterface.InteractionResponseParams: Parameters used to specify the exact form of the interaction_response_function in CatmapInterface.first_order_adsorbate_interaction\n\n\n\n\n\n","category":"type"},{"location":"public/#Reaction-Network","page":"Public","title":"Reaction Network","text":"","category":"section"},{"location":"public/","page":"Public","title":"Public","text":"create_reaction_network\nCatmapInterface.generate_function\nliquidize","category":"page"},{"location":"public/#CatmapInterface.create_reaction_network","page":"Public","title":"CatmapInterface.create_reaction_network","text":"create_reaction_network(catmap_params)\n\n\nCreate a ReactionSystem for the specified microkinetic model.\n\nFor each elementary reaction the CatmapInterface.ratelaw_TS is used. No separate rate equations for the solvent (= H₂O) and the active sites are created but their activities can be specified as parameters. For ficitious gases (OH⁻ and H⁺) and adsorbates the activity coefficients are assumed to be 1. The activity coefficients of the gaseous species can specified as parameters. The thermodynamical corrections to the DFT-data of the formation energies are applied according to the specified modes. New modes can be added by the user by adding a function with the same name to the module. \n\n\n\n\n\n","category":"function"},{"location":"public/#CatmapInterface.generate_function","page":"Public","title":"CatmapInterface.generate_function","text":"generate_function(rn; dvs, ps)\n\n\nGenerate a mutating function from a ReactionSystem that computes the concentration fluxes due to the reaction.\n\n\n\n\n\ngenerate_function(sys; dvs, ps)\n\n\nGenerate a mutating function from a ODESystem that computes the concentration fluxes due to the reaction.\n\n\n\n\n\n","category":"function"},{"location":"public/#CatmapInterface.liquidize","page":"Public","title":"CatmapInterface.liquidize","text":"liquidize(odesys, catmap_params)\n\n\nTransform the (micro-)kinetic model from surface/gas-reactions to surface/electrolyte-reactions using Henry's law.\n\n\n\n\n\n","category":"function"},{"location":"internal/#Internal-Documentation","page":"Internal","title":"Internal Documentation","text":"","category":"section"},{"location":"internal/#Corrections","page":"Internal","title":"Corrections","text":"","category":"section"},{"location":"internal/","page":"Internal","title":"Internal","text":"CatmapInterface.first_order_adsorbate_interaction\nCatmapInterface.ideal_adsorbate_interaction\nCatmapInterface.ideal_gas\nCatmapInterface.harmonic_adsorbate\nCatmapInterface.simple_electrochemical\nCatmapInterface.hbond_surface_charge_density\nCatmapInterface._get_echem_corrections\nCatmapInterface._get_interaction_term","category":"page"},{"location":"internal/#CatmapInterface.first_order_adsorbate_interaction","page":"Internal","title":"CatmapInterface.first_order_adsorbate_interaction","text":"first_order_adsorbate_interaction(\n    energies,\n    catmap_params,\n    θ\n)\n\n\nAdd correction terms to the adsorbation energies based on first order interactions between the adsorbates. \n\nThis adsorbation interaction model is expained in (Image: CatMAP's documentation) and in this (Image: issue)\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface.ideal_adsorbate_interaction","page":"Internal","title":"CatmapInterface.ideal_adsorbate_interaction","text":"\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface.ideal_gas","page":"Internal","title":"CatmapInterface.ideal_gas","text":"ideal_gas(energies, catmap_params)\n\n\nAdd thermodynamic correction terms for all gas species using the ideal gas approximation.\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface.harmonic_adsorbate","page":"Internal","title":"CatmapInterface.harmonic_adsorbate","text":"harmonic_adsorbate(energies, catmap_params)\n\n\nAdd thermodynamic correction terms for all adsorbed species using the harmonic adsorbate approximation.\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface.simple_electrochemical","page":"Internal","title":"CatmapInterface.simple_electrochemical","text":"simple_electrochemical(\n    energies,\n    catmap_params,\n    σ,\n    ϕ_we,\n    ϕ,\n    local_pH\n)\n\n\nAdd electrochemical correction terms for all influenced species using ...\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface.hbond_surface_charge_density","page":"Internal","title":"CatmapInterface.hbond_surface_charge_density","text":"hbond_surface_charge_density(\n    energies,\n    catmap_params,\n    σ,\n    ϕ_we,\n    ϕ,\n    local_pH\n)\n\n\nAdd electrochemical correction terms for all influenced species using ...\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface._get_echem_corrections","page":"Internal","title":"CatmapInterface._get_echem_corrections","text":"_get_echem_corrections(\n    energies,\n    catmap_params,\n    σ,\n    ϕ_we,\n    ϕ,\n    local_pH\n)\n\n\nAdd electrochemical pH-correction terms for all influenced species.\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface._get_interaction_term","page":"Internal","title":"CatmapInterface._get_interaction_term","text":"get_interaction_term(s::String, sp::AdsorbateSpecies, os::String, osp::AdsorbateSpecies, cross_interaction_function)\n\nExtract the interaction term if needed by applying the cross_interaction_function\n\n\n\n\n\nget_interaction_term(s::String, sp::TStateSpecies, os::String, osp::AdsorbateSpecies, cross_interaction_function)\n\nExtract the interaction term if needed by applying the transition_state_cross_interaction_function\n\n\n\n\n\n","category":"function"},{"location":"internal/#Interface","page":"Internal","title":"Interface","text":"","category":"section"},{"location":"internal/","page":"Internal","title":"Internal","text":"CatmapInterface.AdsorbateInteractionParams\nCatmapInterface.TState\nCatmapInterface.ParsedReaction\nCatmapInterface.parse_reaction\nCatmapInterface.parse_reactant_sum\nCatmapInterface.parse_energy_table\nCatmapInterface.specieslist\nCatmapInterface.findspecies\nCatmapInterface._get_adsorbate_interaction_params","category":"page"},{"location":"internal/#CatmapInterface.AdsorbateInteractionParams","page":"Internal","title":"CatmapInterface.AdsorbateInteractionParams","text":"struct AdsorbateInteractionParams\n\nAn AdsorbateInteractionParams struct can specify the model for adsorbate interaction model from the default ideal mean-field model to models where the adsorption energies are dependent on first-orderterms in the  coverages of interacting adsorbates.\n\nadsorbate_interaction_model::Symbol: Name of the adsorbate interaction model: ideal (default) or first_order\n\ninteraction_response_function::Symbol: Name of the interaction response function used to weight the first order interactions: linear (default) or piecewise_linear or smooth_piecewise_linear\n\ncross_interaction_mode::Symbol: Name of the mode to interpolate cross-interaction terms between two adsorbates from their self-interaction terms: geometric_mean (default) or arithmetic_mean or neglect\n\ntransition_state_cross_interaction_mode::Symbol: Name of the mode to interpolate cross-interaction terms between a transition state and an adsorbate: intermediate (default) initial_state or final_state or neglect\n\n\n\n\n\n","category":"type"},{"location":"internal/#CatmapInterface.TState","page":"Internal","title":"CatmapInterface.TState","text":"struct TState\n\nA transition state\n\ncomponents::Vector{Pair{String, Int64}}: List of transition states stored as a pair of the name and stoichiometric factor\n\nbeta::Union{Nothing, Float64}: Transfer coefficient of the transition state\n\n\n\n\n\n","category":"type"},{"location":"internal/#CatmapInterface.ParsedReaction","page":"Internal","title":"CatmapInterface.ParsedReaction","text":"struct ParsedReaction\n\nHolds the information of a parsed reaction equation.\n\neducts::Vector{Pair{String, Int64}}: List of educts stored as a pair of the name and stoichiometric factor\n\nproducts::Vector{Pair{String, Int64}}: List of products stored as a pair of the name and stoichiometric factor\n\ntstate::Union{Nothing, CatmapInterface.TState}: A CatmapInterface.TState if the reaction equation contains a transition state\n\n\n\n\n\n","category":"type"},{"location":"internal/#CatmapInterface.parse_reaction","page":"Internal","title":"CatmapInterface.parse_reaction","text":"parse_reaction(r; beta)\n\n\nParse a specification of a chemical reaction into a CatmapInterface.ParsedReaction.\n\nExample\n\njulia> CatmapInterface.parse_reaction(\"CO*_t <-> CO_g + *_t\")\nCatmapInterface.ParsedReaction([\"CO_t\" => 1], [\"CO_g\" => 1, \"_t\" => 1], nothing)\n\njulia> CatmapInterface.parse_reaction(\"COOH*_t + H2O_g + ele_g <-> COOH-H2O-ele_t <-> CO*_t + H2O_g + OH_g + *_t; beta=0.5\")\nCatmapInterface.ParsedReaction([\"COOH_t\" => 1, \"H2O_g\" => 1, \"ele_g\" => 1], [\"CO_t\" => 1, \"H2O_g\" => 1, \"OH_g\" => 1, \"_t\" => 1], CatmapInterface.TState([\"COOH-H2O-ele_t\" => 1], 0.5))\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface.parse_reactant_sum","page":"Internal","title":"CatmapInterface.parse_reactant_sum","text":"parse_reactant_sum(rs)\n\n\nParse a string as a sum of reactants into a list of pairs reactant/stoichiometric factor.\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface.parse_energy_table","page":"Internal","title":"CatmapInterface.parse_energy_table","text":"parse_energy_table(input_file_path)\n\n\nParse an energy table into a list of named tuples.\n\nThe entries of an energy table must be separated by tabs. The first row of an energy table includes the headers of the columns. The following are recognized (the order of the columns does not matter): \n\nsurface_name\nsite_name\nspecies_name\nformation_energy: in eV\nbulk_structure\nfrequencies: list of enclosed with brackets and comma-separated, in cm⁻¹\nother_parameters\nreference\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface.specieslist","page":"Internal","title":"CatmapInterface.specieslist","text":"specieslist(\n    reactions,\n    species_defs,\n    energy_table,\n    surface_name;\n    electrochemical_thermo_mode\n)\n\n\nCollect the specifications of all reactants in a list.\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface.findspecies","page":"Internal","title":"CatmapInterface.findspecies","text":"findspecies(species_name, site, species_defs)\n\n\nExtract specification of a species at a given site from the species_defs of a CatMAP input file.\n\n\n\n\n\nfindspecies(\n    species_name,\n    energy_table;\n    surface_name,\n    site_name\n)\n\n\nExtract specification of a species from an energy table.\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface._get_adsorbate_interaction_params","page":"Internal","title":"CatmapInterface._get_adsorbate_interaction_params","text":"get_adsorbate_interaction_params()\n\nExtract adsorbate interaction parameters from the included CatMAP input Python-file\n\n\n\n\n\n","category":"function"},{"location":"internal/#Reaction-Network","page":"Internal","title":"Reaction Network","text":"","category":"section"},{"location":"internal/","page":"Internal","title":"Internal","text":"CatmapInterface.ratelaw_TS\nCatmapInterface.compute_free_energies!","category":"page"},{"location":"internal/#CatmapInterface.ratelaw_TS","page":"Internal","title":"CatmapInterface.ratelaw_TS","text":"ratelaw_TS(prefactor, Gf_IS, Gf_TS, T, activprod)\n\n\nComputes the rate of an elementary reaction that passes through a transition state.\n\nThe rate law is based on the Arrhenius relation. The change in Gibbs free energy between the initial and transition state is the needed activation energy. A prefactor and the product of the activities activprod complete the rate law.\n\n\n\n\n\n","category":"function"},{"location":"internal/#CatmapInterface.compute_free_energies!","page":"Internal","title":"CatmapInterface.compute_free_energies!","text":"compute_free_energies!(\n    free_energies,\n    catmap_params,\n    θ,\n    σ,\n    ϕ_we,\n    ϕ,\n    local_pH\n)\n\n\nCompute the Gibbs free energies of all species specified in the catmap_params by applying the specified correction modes.\n\n\n\n\n\n","category":"function"},{"location":"#CatmapInterface","page":"Home","title":"CatmapInterface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation Build Status\n(Image: ) (Image: )","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/smaasz/CatmapInterface.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or, equivalently, via the Pkg API:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg; Pkg.add(\"https://github.com/smaasz/CatmapInterface.jl\")","category":"page"},{"location":"#Guide-Outline","page":"Home","title":"Guide Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"guide.md\"\n]","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"public.md\",\n    \"internal.md\"\n]\nDepth = 1","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"public.md\"]","category":"page"}]
}
